package myanswers;

import org.junit.Test;

import java.util.*;

public class LongestValidParenthese {
    public int longestValidParentheses(String s) {


        // dp[i][j]  = longest valid substring for [i, j] problem
        // which  end on [i, j]

        int dp[][] = new int[s.length()][s.length()];


        int max =0 ;
        for(int len = 2; len <= s.length(); len++){

            for(int i=0; i <= s.length()-len; i++){

                int j = i + len-1;


                if(s.charAt(i) == '(' && s.charAt(j) == ')' ){


                    if(isValidParentheses(dp, i+1, j-1) ){
                        dp[i][j] = dp[i+1][j-1] + 2;
                        max=Math.max(max,  dp[i][j]);
                    }

                    //otherwise
                    // find k from i+1 to j-1
                    // such that [i, k] is valid
                    // and [k+1, j] is valid



                    for(int k = i+1; k <= j-1; k++ ){

                        if(isValidParentheses(dp, i, k)  && isValidParentheses(dp, k+1, j)){
                            dp[i][j] = dp[i][k] + dp[k+1][j];
                            max=Math.max(max,  dp[i][j]);
                        }

                    }

                }else{
                    dp[i][j] = 0;
                }

            }

        }


        return max;

    }


    boolean isValidParentheses(int dp[][], int i, int j){
        if(i>j){
            return true;
        }
        return dp[i][j] == j-i+1;

    }
    @Test
    public void test(){
        String s
        System.out.println(longestValidParentheses(s));
        String[] ss="".split(",");
        int a=0;

    }

}
